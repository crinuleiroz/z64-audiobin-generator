import os
import sys
import shutil
import tempfile
from typing import BinaryIO

# Last updated
LAST_UPDATED = '2025.06.18'

# Create ANSI formatting for terminal messages
# ANSI COLORS: https://talyian.github.io/ansicolors/
RESET  = '\x1b[0m'
BLUE   = '\x1b[38;5;14m'
PINK   = '\x1b[38;5;218m'
GREEN  = '\x1b[38;5;115m'
GREY   = '\x1b[38;5;8m'
YELLOW = '\x1b[33m'

OOT_BLUE = '\x1b[38;5;39m'
MM_PURPLE = '\x1b[38;5;141m'

ROM_FILE = sys.argv[1]
ROM_LENGTH = 67108864 # Decompressed ROM Size

# Ocarina of Time Audiobank Index
OOT_AUDIOBANK_INDEX: bytes = bytes([
    0x00, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3A, 0xA0, 0x02, 0x00, 0x00, 0xFF, 0x5C, 0x04, 0x00, 0x88,
    0x00, 0x00, 0x3A, 0xA0, 0x00, 0x00, 0x17, 0xB0, 0x02, 0x00, 0x00, 0xFF, 0x33, 0x01, 0x00, 0x29,
    0x00, 0x00, 0x52, 0x50, 0x00, 0x00, 0x0C, 0xE0, 0x02, 0x02, 0x00, 0xFF, 0x15, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x5F, 0x30, 0x00, 0x00, 0x15, 0xD0, 0x02, 0x02, 0x01, 0xFF, 0x10, 0x40, 0x00, 0x00,
    0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x02, 0xFF, 0x02, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x0B, 0x60, 0x02, 0x02, 0x01, 0xFF, 0x0D, 0x40, 0x00, 0x00,
    0x00, 0x00, 0x81, 0x60, 0x00, 0x00, 0x05, 0x20, 0x02, 0x02, 0x01, 0xFF, 0x0F, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x86, 0x80, 0x00, 0x00, 0x08, 0x40, 0x02, 0x02, 0x03, 0xFF, 0x0A, 0x40, 0x00, 0x00,
    0x00, 0x00, 0x8E, 0xC0, 0x00, 0x00, 0x0B, 0x20, 0x02, 0x02, 0x01, 0xFF, 0x0A, 0x40, 0x00, 0x00,
    0x00, 0x00, 0x99, 0xE0, 0x00, 0x00, 0x0F, 0xC0, 0x02, 0x02, 0x01, 0xFF, 0x0D, 0x40, 0x00, 0x00,
    0x00, 0x00, 0xA9, 0xA0, 0x00, 0x00, 0x09, 0xD0, 0x02, 0x02, 0x01, 0xFF, 0x0A, 0x40, 0x00, 0x00,
    0x00, 0x00, 0xB3, 0x70, 0x00, 0x00, 0x03, 0x90, 0x02, 0x02, 0x01, 0xFF, 0x04, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xB7, 0x00, 0x00, 0x00, 0x03, 0x20, 0x02, 0x02, 0x01, 0xFF, 0x03, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xBA, 0x20, 0x00, 0x00, 0x06, 0xF0, 0x02, 0x02, 0x01, 0xFF, 0x10, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC1, 0x10, 0x00, 0x00, 0x03, 0x90, 0x02, 0x02, 0x05, 0xFF, 0x05, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC4, 0xA0, 0x00, 0x00, 0x0B, 0x40, 0x02, 0x02, 0x01, 0xFF, 0x10, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xCF, 0xE0, 0x00, 0x00, 0x09, 0xE0, 0x02, 0x02, 0x06, 0xFF, 0x0A, 0x40, 0x00, 0x00,
    0x00, 0x00, 0xD9, 0xC0, 0x00, 0x00, 0x05, 0x60, 0x02, 0x02, 0x01, 0xFF, 0x0F, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xDF, 0x20, 0x00, 0x00, 0x0C, 0xC0, 0x02, 0x01, 0x01, 0xFF, 0x0D, 0x40, 0x00, 0x00,
    0x00, 0x00, 0xEB, 0xE0, 0x00, 0x00, 0x03, 0xA0, 0x02, 0x02, 0x01, 0xFF, 0x04, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xEF, 0x80, 0x00, 0x00, 0x0A, 0xA0, 0x02, 0x02, 0x01, 0xFF, 0x0A, 0x40, 0x00, 0x00,
    0x00, 0x00, 0xFA, 0x20, 0x00, 0x00, 0x0A, 0x60, 0x02, 0x02, 0x01, 0xFF, 0x0A, 0x40, 0x00, 0x00,
    0x00, 0x01, 0x04, 0x80, 0x00, 0x00, 0x0B, 0xF0, 0x02, 0x02, 0x01, 0xFF, 0x0B, 0x40, 0x00, 0x00,
    0x00, 0x01, 0x10, 0x70, 0x00, 0x00, 0x01, 0xF0, 0x02, 0x02, 0x01, 0xFF, 0x04, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x12, 0x60, 0x00, 0x00, 0x08, 0x60, 0x02, 0x02, 0x01, 0xFF, 0x09, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x1A, 0xC0, 0x00, 0x00, 0x05, 0xB0, 0x02, 0x02, 0x01, 0xFF, 0x08, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x20, 0x70, 0x00, 0x00, 0x02, 0x50, 0x02, 0x02, 0x01, 0xFF, 0x0F, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x22, 0xC0, 0x00, 0x00, 0x04, 0xE0, 0x02, 0x02, 0x01, 0xFF, 0x0C, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x27, 0xA0, 0x00, 0x00, 0x04, 0xC0, 0x02, 0x02, 0x01, 0xFF, 0x05, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x2C, 0x60, 0x00, 0x00, 0x0C, 0x00, 0x02, 0x02, 0x01, 0xFF, 0x0C, 0x40, 0x00, 0x00,
    0x00, 0x01, 0x38, 0x60, 0x00, 0x00, 0x02, 0x70, 0x02, 0x02, 0x01, 0xFF, 0x05, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x3A, 0xD0, 0x00, 0x00, 0x06, 0x40, 0x02, 0x02, 0x01, 0xFF, 0x08, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x41, 0x10, 0x00, 0x00, 0x13, 0x00, 0x02, 0x02, 0x01, 0xFF, 0x10, 0x40, 0x00, 0x00,
    0x00, 0x01, 0x54, 0x10, 0x00, 0x00, 0x11, 0xA0, 0x02, 0x02, 0x01, 0xFF, 0x10, 0x40, 0x00, 0x00,
    0x00, 0x01, 0x65, 0xB0, 0x00, 0x00, 0x17, 0x20, 0x02, 0x02, 0x01, 0xFF, 0x10, 0x40, 0x00, 0x00,
    0x00, 0x01, 0x7C, 0xD0, 0x00, 0x00, 0x0D, 0xE0, 0x02, 0x01, 0x01, 0xFF, 0x0F, 0x40, 0x00, 0x00,
    0x00, 0x01, 0x8A, 0xB0, 0x00, 0x00, 0x06, 0x60, 0x02, 0x01, 0x01, 0xFF, 0x0F, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x91, 0x10, 0x00, 0x00, 0x39, 0x40, 0x02, 0x02, 0x00, 0xFF, 0x02, 0x00, 0x00, 0x00,
])

# Ocarina of Time Audiotable Index
OOT_AUDIOTABLE_INDEX: bytes = bytes([
    0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xA9, 0xE0, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x3F, 0xA9, 0xE0, 0x00, 0x00, 0x5C, 0xD0, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x40, 0x06, 0xB0, 0x00, 0x01, 0xD0, 0xB0, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x41, 0xD7, 0x60, 0x00, 0x00, 0xA5, 0xD0, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x42, 0x7D, 0x30, 0x00, 0x00, 0xFA, 0xB0, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x43, 0x77, 0xE0, 0x00, 0x02, 0x92, 0xF0, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
])

# Majora's Mask Audiobank Index
MM_AUDIOBANK_INDEX: bytes = bytes([
    0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xC0, 0x02, 0x00, 0x00, 0xFF, 0x7A, 0x10, 0x01, 0xC5,
    0x00, 0x00, 0x81, 0xC0, 0x00, 0x00, 0x36, 0xD0, 0x02, 0x00, 0x00, 0xFF, 0x7E, 0x01, 0x00, 0x58,
    0x00, 0x00, 0xB8, 0x90, 0x00, 0x00, 0x0C, 0xE0, 0x02, 0x00, 0x00, 0xFF, 0x15, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC5, 0x70, 0x00, 0x00, 0x15, 0xD0, 0x02, 0x02, 0x01, 0xFF, 0x10, 0x40, 0x00, 0x00,
    0x00, 0x00, 0xDB, 0x40, 0x00, 0x00, 0x0B, 0x60, 0x02, 0x02, 0x01, 0xFF, 0x0D, 0x40, 0x00, 0x00,
    0x00, 0x00, 0xE6, 0xA0, 0x00, 0x00, 0x0B, 0xE0, 0x02, 0x02, 0x01, 0xFF, 0x0A, 0x40, 0x00, 0x00,
    0x00, 0x00, 0xF2, 0x80, 0x00, 0x00, 0x0F, 0xC0, 0x02, 0x02, 0x01, 0xFF, 0x0D, 0x40, 0x00, 0x00,
    0x00, 0x01, 0x02, 0x40, 0x00, 0x00, 0x06, 0xF0, 0x02, 0x02, 0x01, 0xFF, 0x10, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x09, 0x30, 0x00, 0x00, 0x05, 0x60, 0x02, 0x02, 0x01, 0xFF, 0x0F, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x0E, 0x90, 0x00, 0x00, 0x0C, 0xC0, 0x02, 0x01, 0x01, 0xFF, 0x0D, 0x40, 0x00, 0x00,
    0x00, 0x01, 0x1B, 0x50, 0x00, 0x00, 0x0A, 0xA0, 0x02, 0x02, 0x01, 0xFF, 0x0A, 0x40, 0x00, 0x00,
    0x00, 0x01, 0x25, 0xF0, 0x00, 0x00, 0x0A, 0x60, 0x02, 0x02, 0x01, 0xFF, 0x0A, 0x40, 0x00, 0x00,
    0x00, 0x01, 0x30, 0x50, 0x00, 0x00, 0x0B, 0xF0, 0x02, 0x02, 0x01, 0xFF, 0x0B, 0x40, 0x00, 0x00,
    0x00, 0x01, 0x3C, 0x40, 0x00, 0x00, 0x04, 0xC0, 0x02, 0x02, 0x01, 0xFF, 0x05, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x41, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x02, 0x02, 0x01, 0xFF, 0x0C, 0x40, 0x00, 0x00,
    0x00, 0x01, 0x4D, 0x00, 0x00, 0x00, 0x0D, 0xE0, 0x02, 0x01, 0x01, 0xFF, 0x0F, 0x40, 0x00, 0x00,
    0x00, 0x01, 0x5A, 0xE0, 0x00, 0x00, 0x06, 0x60, 0x02, 0x01, 0x01, 0xFF, 0x0F, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x61, 0x40, 0x00, 0x00, 0x14, 0xD0, 0x02, 0x02, 0x01, 0xFF, 0x10, 0x40, 0x00, 0x00,
    0x00, 0x01, 0x76, 0x10, 0x00, 0x00, 0x0C, 0x50, 0x02, 0x01, 0x01, 0xFF, 0x0D, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x82, 0x60, 0x00, 0x00, 0x11, 0x50, 0x02, 0x01, 0x01, 0xFF, 0x0F, 0x40, 0x00, 0x00,
    0x00, 0x01, 0x93, 0xB0, 0x00, 0x00, 0x05, 0x20, 0x02, 0x02, 0x01, 0xFF, 0x06, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x98, 0xD0, 0x00, 0x00, 0x07, 0x70, 0x02, 0x02, 0x01, 0xFF, 0x0D, 0x00, 0x00, 0x00,
    0x00, 0x01, 0xA0, 0x40, 0x00, 0x00, 0x05, 0x00, 0x02, 0x02, 0x01, 0xFF, 0x08, 0x00, 0x00, 0x00,
    0x00, 0x01, 0xA5, 0x40, 0x00, 0x00, 0x09, 0x40, 0x02, 0x02, 0x01, 0xFF, 0x0E, 0x00, 0x00, 0x00,
    0x00, 0x01, 0xAE, 0x80, 0x00, 0x00, 0x08, 0x40, 0x02, 0x02, 0x01, 0xFF, 0x0B, 0x40, 0x00, 0x00,
    0x00, 0x01, 0xB6, 0xC0, 0x00, 0x00, 0x14, 0x40, 0x02, 0x02, 0x01, 0xFF, 0x10, 0x40, 0x00, 0x00,
    0x00, 0x01, 0xCB, 0x00, 0x00, 0x00, 0x03, 0x00, 0x02, 0x02, 0x01, 0xFF, 0x04, 0x00, 0x00, 0x00,
    0x00, 0x01, 0xCE, 0x00, 0x00, 0x00, 0x0A, 0xE0, 0x02, 0x02, 0x01, 0xFF, 0x0A, 0x40, 0x00, 0x00,
    0x00, 0x01, 0xD8, 0xE0, 0x00, 0x00, 0x06, 0xF0, 0x02, 0x02, 0x01, 0xFF, 0x0C, 0x00, 0x00, 0x00,
    0x00, 0x01, 0xDF, 0xD0, 0x00, 0x00, 0x05, 0xB0, 0x02, 0x02, 0x01, 0xFF, 0x0B, 0x00, 0x00, 0x00,
    0x00, 0x01, 0xE5, 0x80, 0x00, 0x00, 0x08, 0x10, 0x02, 0x02, 0x01, 0xFF, 0x09, 0x00, 0x00, 0x00,
    0x00, 0x01, 0xED, 0x90, 0x00, 0x00, 0x05, 0x20, 0x02, 0x02, 0x01, 0xFF, 0x08, 0x00, 0x00, 0x00,
    0x00, 0x01, 0xF2, 0xB0, 0x00, 0x00, 0x0F, 0xF0, 0x02, 0x02, 0x01, 0xFF, 0x10, 0x40, 0x00, 0x00,
    0x00, 0x02, 0x02, 0xA0, 0x00, 0x00, 0x15, 0xE0, 0x02, 0x02, 0x01, 0xFF, 0x10, 0x40, 0x00, 0x00,
    0x00, 0x02, 0x18, 0x80, 0x00, 0x00, 0x00, 0xD0, 0x02, 0x01, 0x01, 0xFF, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x02, 0x19, 0x50, 0x00, 0x00, 0x14, 0xB0, 0x02, 0x02, 0x01, 0xFF, 0x10, 0x40, 0x00, 0x00,
    0x00, 0x02, 0x2E, 0x00, 0x00, 0x00, 0x14, 0x10, 0x02, 0x02, 0x01, 0xFF, 0x0F, 0x40, 0x00, 0x00,
    0x00, 0x02, 0x42, 0x10, 0x00, 0x00, 0x15, 0x40, 0x02, 0x02, 0x01, 0xFF, 0x0F, 0x40, 0x00, 0x00,
    0x00, 0x02, 0x57, 0x50, 0x00, 0x00, 0x03, 0x90, 0x02, 0x02, 0x02, 0xFF, 0x05, 0x00, 0x00, 0x00,
    0x00, 0x02, 0x5A, 0xE0, 0x00, 0x00, 0x05, 0x20, 0x02, 0x01, 0x01, 0xFF, 0x08, 0x00, 0x00, 0x00,
    0x00, 0x02, 0x60, 0x00, 0x00, 0x00, 0x03, 0xF0, 0x02, 0x02, 0x00, 0xFF, 0x05, 0x00, 0x00, 0x00,
])

# Majora's Mask Audiotable Index
MM_AUDIOTABLE_INDEX: bytes = bytes([
    0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x8C, 0xC0, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x53, 0x8C, 0xC0, 0x00, 0x00, 0xFA, 0xB0, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
])

# "Filename": (offset, size)
AUDIOBIN_OFFSETS: dict[str, dict[str, tuple[int, int]]] = {
    'oot': {
       'Audiobank':        (0x0000D390, 0x0001CA50),
       # 'Audiobank_index':  (0x00B896A0, 0x00000270),
       'Audiotable':       (0x00079470, 0x00460AD0),
       # 'Audiotable_index': (0x00B8A1C0, 0x00000080)
    },
    'mm': {
       'Audiobank':        (0x00020700, 0x000263F0),
       # 'Audiobank_index':  (0x00C776C0, 0x000002A0),
       'Audiotable':       (0x00097F70, 0x00548770),
       # 'Audiotable_index': (0x00C78380, 0x00000040)
    }
}

# "Filename": bytes
AUDIOBIN_INDICES: dict[str, bytes] = {
    'oot': {
      'Audiobank_index':  OOT_AUDIOBANK_INDEX,
      'Audiotable_index': OOT_AUDIOTABLE_INDEX
    },
    'mm': {
      'Audiobank_index':  MM_AUDIOBANK_INDEX,
      'Audiotable_index': MM_AUDIOTABLE_INDEX,
    }

}

class SysMsg:
  @staticmethod
  def header():
    print(f'''\
{GREY}[▪]----------------------------------[▪]
 |   {RESET}{PINK}AUDIOBIN GENERATOR {GREY}v{LAST_UPDATED}   |
[▪]----------------------------------[▪]{RESET}
''')

  @staticmethod
  def complete():
    print(f'''\
{GREY}[▪]----------------------------------[▪]
 |     {RESET}{GREEN}Process is now completed      {GREY}|
[▪]----------------------------------[▪]{RESET}
''')
    os.system('pause')

  @staticmethod
  def compressed_rom():
    print(f'''\
{GREY}[{PINK}>{GREY}]:{RESET} Error: ROM file is not decompressed!
''')
    os.system('pause')
    sys.exit(1)

  @staticmethod
  def read_rom_header():
    print(f'''\
{GREY}[{PINK}>{GREY}]:{RESET} Reading ROM header:     {BLUE}"{ROM_FILE}"{RESET}''')

  @staticmethod
  def detected_game(game : str, color : str):
    print(f'''\
{GREY}[{PINK}>{GREY}]:{RESET} Detected game:          {color}"{game}"{RESET}
''')

  @staticmethod
  def byteswapped_rom():
    print(f'''\
{GREY}[{PINK}>{GREY}]:{RESET} Error: ROM file byte order is "Byteswapped", use {PINK}tool64{RESET} to change the byte order to "Big Endian"!
''')
    os.system('pause')
    sys.exit(1)

  @staticmethod
  def little_endian_rom():
    print(f'''\
{GREY}[{PINK}>{GREY}]:{RESET} Error: ROM file byte order is "Little Endian", use {PINK}tool64{RESET} to change the byte order to "Big Endian"!
''')
    os.system('pause')
    sys.exit(1)

  @staticmethod
  def unknown_game():
    print(f'''\
{GREY}[{PINK}>{GREY}]:{RESET} Error: Decompressed ROM has an unexpected ROM header!
''')
    os.system('pause')
    sys.exit(1)

  @staticmethod
  def processing_file(name: str):
    print(f'''\
{GREY}[{PINK}>{GREY}]:{RESET} Extracting and writing: {BLUE}"{name}"{RESET}''')

  @staticmethod
  def creating_archive(file_dir : str, filename : str):
    print(f'''\

{GREY}[{PINK}>{GREY}]:{RESET} Creating archive:       {BLUE}"{file_dir}/{filename}.audiobin"{RESET}
''')

def extract_and_write_audiofile(rom: BinaryIO, offset : int, size: int, filename: str, tempfolder: str):
  rom.seek(offset)
  audio_data = rom.read(size)
  filepath = os.path.join(tempfolder, filename)
  with open(filepath, 'wb') as f:
    f.write(audio_data)

def write_audiofile_indices(index_bytes: bytes, filename: str, tempfolder: str):
  filepath = os.path.join(tempfolder, filename)
  with open(filepath, 'wb') as f:
    f.write(index_bytes)

def generate_audiobin(game: str, file_dir: str, tempfolder: str):
  label = game.upper()

  with open(ROM_FILE, 'rb') as rom:
    for name, (offset, size) in AUDIOBIN_OFFSETS[game].items():
      SysMsg.processing_file(name)
      extract_and_write_audiofile(rom, offset, size, name, tempfolder)

  for name, index_bytes in AUDIOBIN_INDICES[game].items():
    write_audiofile_indices(index_bytes, name, tempfolder)

  SysMsg.creating_archive(file_dir, label)
  shutil.make_archive(f'{file_dir}/{label}', 'zip', tempfolder)
  os.rename(f'{file_dir}/{label}.zip', f'{file_dir}/{label}.audiobin')

def main(game: str) -> None:
  file_dir = os.path.dirname(os.path.abspath(__file__))

  with tempfile.TemporaryDirectory(prefix='audiobin_generator_') as tempfolder:
    if game in ('oot', 'mm'):
      generate_audiobin(game, file_dir, tempfolder)

if __name__ == '__main__':
  SysMsg.header()

  # if os.path.getsize(ROM_FILE) != ROM_LENGTH:
    # SysMsg.compressed_rom()

  SysMsg.read_rom_header()
  with open(ROM_FILE, 'rb') as rom:
    rom_header = rom.read(64)

    # OCARINA OF TIME BIG ENDIAN
    if b"THE LEGEND OF ZELDA \x00\x00\x00\x00\x00\x00\x00CZLE\x00" in rom_header:
      SysMsg.detected_game("Ocarina of Time", OOT_BLUE)
      game = 'oot'

    # MAJORA'S MASK BIG ENDIAN
    elif b"ZELDA MAJORA'S MASK \x00\x00\x00\x00\x00\x00\x00NZSE\x00" in rom_header:
      SysMsg.detected_game("Majora's Mask", MM_PURPLE)
      game = 'mm'

    # OCARINA OF TIME BYTESWAPPED
    elif b"HT EELEGDNO  FEZDL A\x00\x00\x00\x00\x00\x00C\x00L\x00E" in rom_header:
      SysMsg.detected_game("Ocarina of Time", OOT_BLUE)
      SysMsg.byteswapped_rom()

    # MAJORA'S MASK BYTESWAPPED
    elif b"EZDL AAMOJARS'M SA K\x00\x00\x00\x00\x00\x00N\x00SZ\x00E" in rom_header:
      SysMsg.detected_game("Majora's Mask", MM_PURPLE)
      SysMsg.byteswapped_rom()

    # OCARINA OF TIME LITTLE ENDIAN
    elif b"EHTEGELO DNEZ F ADL\x00\x00\x00\x00C\x00\x00\x00\x00ELZ" in rom_header:
      SysMsg.detected_game("Ocarina of Time", OOT_BLUE)
      SysMsg.little_endian_rom()

    # MAJORA'S MASK LITTLE ENDIAN
    elif b"DLEZAM AAROJM S' KSA\x00\x00\x00\x00N\x00\x00\x00\x00ESZ" in rom_header:
      SysMsg.detected_game("Majora's Mask", MM_PURPLE)
      SysMsg.little_endian_rom()

    # UNKNOWN GAME
    else:
      SysMsg.unknown_game()

  main(game)
  SysMsg.complete()
